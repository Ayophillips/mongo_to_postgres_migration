AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless MongoDB to PostgreSQL Data Migration

Parameters:
  VpcStackName:
    Type: String
    Description: Name of the VPC infrastructure stack
    Default: MongoDBAtlasVPC
  PGHost:
    Type: String
    Description: PostgreSQL host endpoint

  PGUser:
    Type: String
    Description: PostgreSQL username

  PGPassword:
    Type: String
    Description: PostgreSQL password
    NoEcho: true

  PGDatabase:
    Type: String
    Description: PostgreSQL database name

  MongoURI:
    Type: String
    Description: MongoDB connection URI
    NoEcho: true

Globals:
  Function:
    Timeout: 900
    Runtime: python3.9
    MemorySize: 256
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${VpcStackName}-LAMBDA-SG"
      SubnetIds:
        Fn::Split:
          - ","
          - Fn::ImportValue: !Sub "${VpcStackName}-PRIVATE-SUBNETS"
    Environment:
      Variables:
        LOG_LEVEL: INFO
        BATCH_SIZE: 1000

Resources:
  PostgreSQLLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: postgresql-layer
      Description: PostgreSQL dependencies
      ContentUri: layers/postgresql/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain

  MongoPythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: mongo-python-layer
      Description: Dependencies for MongoDB functions
      ContentUri: layers/mongodb/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain

  ReadMongoFunction:
    Type: AWS::Serverless::Function
    DependsOn: MongoPythonLayer
    Properties:
      CodeUri: functions/read_mongo/
      Handler: app.lambda_handler
      Layers:
        - !Ref MongoPythonLayer
      Environment:
        Variables:
          MONGO_SECRETS_ARN: !Ref MongoDBSecrets
          BATCH_SIZE: 10 # Explicitly set smaller batch size
          LOG_LEVEL: INFO
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref MongoDBSecrets

  TransformDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transform_data/
      Handler: app.lambda_handler
      Layers:
        - !Ref MongoPythonLayer

  WritePostgresFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/write_postgres/
      Handler: app.lambda_handler
      Layers:
        - !Ref MongoPythonLayer
        - !Ref PostgreSQLLayer
      Environment:
        Variables:
          POSTGRES_SECRETS_ARN: !Ref PostgresSecrets
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref PostgresSecrets

  # Add metadata to describe the dependency on the VPC stack
  MongoDBSecrets:
    Type: AWS::SecretsManager::Secret
    Metadata:
      DependsOn: !Ref VpcStackName
    Properties:
      Description: MongoDB connection details
      SecretString: !Sub '{"uri": "${MongoURI}"}'

  PostgresSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: PostgreSQL connection details
      SecretString: !Sub '{"host": "${PGHost}", "username": "${PGUser}", "password": "${PGPassword}", "database": "${PGDatabase}"}'

  MigrationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: ReadMongo
        States:
          ReadMongo:
            Type: Task
            Resource: !GetAtt ReadMongoFunction.Arn
            Next: TransformData
            ResultPath: "$"
            Retry:
              - ErrorEquals: ["MongoReadError", "States.TaskFailed"]
                IntervalSeconds: 3
                MaxAttempts: 3
                BackoffRate: 2
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: FailState
                ResultPath: "$.error"

          TransformData:
            Type: Task
            Resource: !GetAtt TransformDataFunction.Arn
            Next: WritePostgres
            ResultPath: "$"
            Retry:
              - ErrorEquals: ["TransformError", "States.TaskFailed"]
                IntervalSeconds: 3
                MaxAttempts: 3
                BackoffRate: 2
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: FailState
                ResultPath: "$.error"

          WritePostgres:
            Type: Task
            Resource: !GetAtt WritePostgresFunction.Arn
            Next: CheckMoreRecords
            ResultPath: "$"
            Retry:
              - ErrorEquals: ["States.TaskFailed"]
                IntervalSeconds: 3
                MaxAttempts: 3
                BackoffRate: 2
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: FailState
                ResultPath: "$.error"

          CheckMoreRecords:
            Type: Choice
            Choices:
              - Variable: "$.has_more"
                BooleanEquals: true
                Next: ReadMongo
            Default: SuccessState

          SuccessState:
            Type: Succeed

          FailState:
            Type: Fail
            Cause: "Migration Process Failed"
            Error: "MigrationError"

      Role: arn:aws:iam::600627337305:role/StateMachineExecutionRole
